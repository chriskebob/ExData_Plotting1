goodm <- m[which(m$Ozone > 31 & m$Temp > 90),]
goodm
mean(goodm$Solar.R)
goodm <- m[which(m$Month == 5),]
goodm <- m[which(m$Month == 6),]
mean(goodm$Temp)
goodm <- m[which(m$Month == 5),]
good <- complete.cases(goodm)
newgoodm <- goodm[good]
good
goodm
max(goodm$Ozone na.rm = TRUE)
max(goodm$Ozone, na.rm = TRUE)
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(1)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z *2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z *2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
agrs(list.files)
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.page()
file.path()
file.path("mytest3.R")
nxt()
file.path('folder1','folder2')
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
bye()
x <- list(a = 1:5, b=rnorm(10))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
?runif
lapply(x, runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3,2))
x
lapply(x, function(elt) elt[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1))
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x, mean)
sapply(x, mean)
mean(x)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2*2*10), c(2,2,10))
apply(a, c(1,2)), mean)
apply(a, c(1,2), mean)
rowMeans(a, dims = 2)
?rowMeans
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd) {}
noise <- function(n, mean, sd) {}
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5,1,2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3, 10)
f
?gl
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, range)
tapply(x, f, median)
tapply(x, f, mean)
split(x,f)
lapply(split(x,f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = TRUE))
rm(list =ls())
mean(x)
traceback()
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
options(error = recover)
read.csv("nosuchfile")
library(datasets)
data("iris")
?iris
colMeans(iris)
library(datasets)
data("iris")
tapply(iris[, 1:4], iris$Species)
tapply(iris[, 1:4], iris$Species, mean)
iris$Species
iris[, 1:4]
tapply(iris$Sepal.Length, iris$Species, mean)
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
b <- array(rnorm(2 * 10 * 2), c(2, 10, 2))
apply(b, c(1, 3), mean)
rowMeans(b, dims =2)
str(str)
str(lm)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
f <- gl(40,10)
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
m[,1]
s <- split(airquality, airquality$Month)
str(s)
rm(list = ls())
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(10)
x <- rbinon(100, 1, 0.5)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
plot(x,y)
summary(y)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)
sample(1:10)
sample(1:10, replace = TRUE)
set.seed(1)
rpois(5,2)
?ppois
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
b <-
m
rm(list = ls())
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
mmy_data
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
bye()
swirl()
bye()
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, par(col = 2))
swirl()
plot(cars, par(col = 2))
swirl()
plot(cars)
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
bye()
rm(list = ls())
library(sqldf)
filename <- "household_power_consumption.txt"
data <- read.csv2.sql(file = filename, sql = "SELECT * FROM file WHERE Date = '1/2/2007' OR Date = '2/2/2007'")
setwd("C:/Users/cpbobko/datasciencecoursera/exploreproject/")
data <- read.csv2.sql(file = filename, sql = "SELECT * FROM file WHERE Date = '1/2/2007' OR Date = '2/2/2007'")
read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings="?", as.is=TRUE)
data$Date<-as.Date(hwdata$Date, format = "%d/%m/%Y")
data$Date<-as.Date(data$Date, format = "%d/%m/%Y")
str(data)
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data
powerdata <- read.table("household_power_consumption.txt", header=TRUE, sep=";", na.strings="?", as.is=TRUE)
powerdata$Date<-as.Date(powerdata$Date, format = "%d/%m/%Y")
powerdatarange <- subset(powerdata, Date == as.Date("2007-02-01") | Date == as.Date("2007-02-02"))
powerdatarange$datetime<-as.POSIXct(paste(powerdatarange$Date, powerdatarange$Time), format="%Y-%m-%d %H:%M:%S")
with (powerdatarange,
hist(Global_active_power, breaks=12, col="red", xlab = "Global Active Power (kilowatts)", main="Global Active Power"))
getwd()
png("plot1.png", width=480, height=480, units="px", bg="transparent")
with (powerdatarange,
hist(Global_active_power, breaks=12, col="red", xlab = "Global Active Power (kilowatts)", main="Global Active Power"))
dev.off()
powerdatarange$datetime<-strptime(paste(data$Date, data$Time),
"%d/%m/%Y %H:%M:%S")
png("plot1.png", width=480, height=480, units="px", bg="transparent")
with (powerdatarange,
hist(Global_active_power, breaks=12, col="red",
xlab = "Global Active Power (kilowatts)", main="Global Active Power"))
dev.off()
powerdatarange$datetime<-strptime(paste(data$Date, data$Time),
"%d/%m/%Y %H:%M:%S")
powerdatarange$datetime<-strptime(paste(powerdata$rangeDate,
poweredatarange$Time),
"%d/%m/%Y %H:%M:%S")
powerdatarange$datetime<-strptime(paste(powerdatarange$Date,
poweredatarange$Time),
"%d/%m/%Y %H:%M:%S")
powerdatarange$datetime<-strptime(paste(powerdatarange$Date,
powerdatarange$Time),
"%d/%m/%Y %H:%M:%S")
plot(powerdatarange$datetime, powerdatarange$Global_active_power)
source('C:/Users/cpbobko/datasciencecoursera/exploreproject/plot2.R')
source('C:/Users/cpbobko/datasciencecoursera/exploreproject/plot2.R')
plot(powerdatarange$datetime, powerdatarange$Global_active_power)
class(powerdatarange$Global_active_power)
class(powerdatarange$datetime)
powerdatarange$datetime<-strptime(paste(powerdatarange$Date,
powerdatarange$Time),
format = "%d/%m/%Y %H:%M:%S")
class(powerdatarange$datetime)
powerdatarange$datetime[, 1:5]
powerdatarange$datetime[1:5,]
View(powerdatarange)
View(powerdatarange)
powerdatarange$datetime<-as.POSIXct(paste(powerdatarange$Date, powerdatarange$Time), format="%Y-%m-%d %H:%M:%S")
plot(powerdatarange$datetime, powerdatarange$Global_active_power)
plot(powerdatarange$datetime, powerdatarange$Global_active_power,
type = "n",
ylab = "Global Active Power (kilowatts)")
lines(powerdatarange$datetime, powerdatarange$Global_active_power)
par(cex=0.8)
plot(powerdatarange$datetime, powerdatarange$Global_active_power,
type = "n",
xlab = "",
ylab = "Global Active Power (kilowatts)")
lines(powerdatarange$datetime, powerdatarange$Global_active_power)
source('C:/Users/cpbobko/datasciencecoursera/exploreproject/plot2.R')
png("plot2.png", width=480, height=480, units="px", bg="transparent")
par(cex=0.8)
plot(powerdatarange$datetime, powerdatarange$Global_active_power,
type = "n",
xlab = "",
ylab = "Global Active Power (kilowatts)")
lines(powerdatarange$datetime, powerdatarange$Global_active_power)
dev.off()
png("plot1.png", width=480, height=480, units="px", bg="transparent")
with (powerdatarange,
hist(Global_active_power, breaks=12, col="red",
xlab = "Global Active Power (kilowatts)", main="Global Active Power"))
dev.off()
png("plot2.png", width=480, height=480, units="px", bg="transparent")
plot(powerdatarange$datetime, powerdatarange$Global_active_power,
type = "n",
xlab = "",
ylab = "Global Active Power (kilowatts)")
lines(powerdatarange$datetime, powerdatarange$Global_active_power)
dev.off()
plot(powerdatarange$datetime, powerdatarange$Sub_metering_1,
type = "n",
xlab = "",
ylab = "Energy sub metering")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_1, col = "black")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_2, col = "red")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), lty = c(1, 1, 1),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(powerdatarange$datetime, powerdatarange$Sub_metering_1,
type = "n",
xlab = "",
ylab = "Energy sub metering")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_1, col = "black")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_2, col = "red")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col = c("black", "red", "blue"), lty = c(1, 1, 1),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
source('C:/Users/cpbobko/datasciencecoursera/exploreproject/plot3.R')
par(mfrow = c(2, 2))
plot(powerdatarange$datetime, powerdatarange$Global_active_power,
type = "n", xlab = "", ylab = "Global Active Power")
lines(powerdatarange$datetime, powerdatarange$Global_active_power)
plot(powerdatarange$datetime, powerdatarange$Voltage,
type = "n", xlab = "datetime", ylab = "Voltage")
lines(powerdatarange$datetime, powerdatarange$Voltage)
plot(powerdatarange$datetime, powerdatarange$Sub_metering_1,
type = "n",
xlab = "",
ylab = "Energy sub metering")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_1, col = "black")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_2, col = "red")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), lty = c(1, 1, 1),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(powerdatarange$datetime, powerdatarange$Global_reactive_power,
type = "n", xlab = "datetime", ylab = "Global_reactive_power")
lines(powerdatarange$datetime, powerdatarange$Global_reactive_power)
png("plot3.png", width=480, height=480, units="px", bg="transparent")
par(mfrow = c(2, 2))
plot(powerdatarange$datetime, powerdatarange$Global_active_power,
type = "n", xlab = "", ylab = "Global Active Power")
lines(powerdatarange$datetime, powerdatarange$Global_active_power)
plot(powerdatarange$datetime, powerdatarange$Voltage,
type = "n", xlab = "datetime", ylab = "Voltage")
lines(powerdatarange$datetime, powerdatarange$Voltage)
plot(powerdatarange$datetime, powerdatarange$Sub_metering_1,
type = "n",
xlab = "",
ylab = "Energy sub metering")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_1, col = "black")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_2, col = "red")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), lty = c(1, 1, 1),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(powerdatarange$datetime, powerdatarange$Global_reactive_power,
type = "n", xlab = "datetime", ylab = "Global_reactive_power")
lines(powerdatarange$datetime, powerdatarange$Global_reactive_power)
dev.off()
png("plot4.png", width=480, height=480, units="px", bg="transparent")
par(mfrow = c(2, 2))
plot(powerdatarange$datetime, powerdatarange$Global_active_power,
type = "n", xlab = "", ylab = "Global Active Power")
lines(powerdatarange$datetime, powerdatarange$Global_active_power)
plot(powerdatarange$datetime, powerdatarange$Voltage,
type = "n", xlab = "datetime", ylab = "Voltage")
lines(powerdatarange$datetime, powerdatarange$Voltage)
plot(powerdatarange$datetime, powerdatarange$Sub_metering_1,
type = "n",
xlab = "",
ylab = "Energy sub metering")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_1, col = "black")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_2, col = "red")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), lty = c(1, 1, 1),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(powerdatarange$datetime, powerdatarange$Global_reactive_power,
type = "n", xlab = "datetime", ylab = "Global_reactive_power")
lines(powerdatarange$datetime, powerdatarange$Global_reactive_power)
dev.off()
png("plot3.png", width=480, height=480, units="px", bg="transparent")
plot(powerdatarange$datetime, powerdatarange$Sub_metering_1,
type = "n",
xlab = "",
ylab = "Energy sub metering")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_1, col = "black")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_2, col = "red")
lines(powerdatarange$datetime, powerdatarange$Sub_metering_3, col = "blue")
legend("topright", col = c("black", "red", "blue"), lty = c(1, 1, 1),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
